import { ElementRef, EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { Option, Selection } from './interfaces';
export interface SelectConfig {
    allowNewOptions: boolean;
    closeOnSelect: boolean;
    deleteOnBackspace: boolean;
}
export declare class MultiSelectComponent implements ControlValueAccessor {
    config: SelectConfig;
    emptyText: string;
    emptyOptions: string;
    options: Option[];
    change: EventEmitter<string[]>;
    onChangeByUser: EventEmitter<string[]>;
    inputRef: ElementRef;
    _activeOptionIndex: number;
    _selections: Selection[];
    _options: Option[];
    disabled: boolean;
    keyup$: BehaviorSubject<KeyboardEvent>;
    isFocused: boolean;
    inputValue: string;
    propagateChange: (_: any) => void;
    propagateTouched: () => void;
    showOptions: boolean;
    selections: string[];
    delete($event: MouseEvent, selection: Selection): void;
    focus($event: FocusEvent): void;
    getEmptyText(): string;
    keydown($event: KeyboardEvent): void;
    keyup($event: KeyboardEvent): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    select(option: string): void;
    setDisabledState(disabled: boolean): void;
    writeValue(value?: string[]): void;
}
