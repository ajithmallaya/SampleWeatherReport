"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var BehaviorSubject_1 = require("rxjs/BehaviorSubject");
var SelectComponent = SelectComponent_1 = (function () {
    function SelectComponent() {
        this.emptyText = '';
        this.emptyOptions = '';
        this.change = new core_1.EventEmitter();
        this.onChangeByUser = new core_1.EventEmitter();
        this._activeOptionIndex = 0;
        this._selection = '';
        this._options = [];
        this.keyup$ = new BehaviorSubject_1.BehaviorSubject(null);
        this.propagateChange = function (_) { };
        this.propagateTouched = function () { };
    }
    Object.defineProperty(SelectComponent.prototype, "selection", {
        get: function () {
            return this._selection;
        },
        set: function (selection) {
            this._selection = selection;
            this.propagateChange(this.selection);
            this.change.emit(selection);
        },
        enumerable: true,
        configurable: true
    });
    SelectComponent.prototype.clear = function ($event) {
        if (this.disabled)
            return;
        $event.stopPropagation();
        this.selection = '';
        this.onChangeByUser.emit(this.selection);
    };
    SelectComponent.prototype.focusInput = function () {
        var _this = this;
        if (this.disabled)
            return;
        this.isFocused = true;
        setTimeout(function () { return _this.inputRef.nativeElement.focus(); });
    };
    SelectComponent.prototype.focus = function ($event) {
        if (this.disabled)
            return;
        if ($event.type === 'focusin') {
            this.showOptions = true;
            this.inputRef.nativeElement.value = this.selection;
        }
        else {
            this.isFocused = false;
            this.showOptions = false;
            this.inputValue = '';
            this.propagateTouched();
        }
    };
    SelectComponent.prototype.keydown = function ($event) {
        if ($event.key === 'Enter' && this.showOptions) {
            $event.preventDefault();
        }
        if ($event.key === 'Backspace') {
            this.inputValue = this.inputRef.nativeElement.value;
            this.selection = '';
            this.inputRef.nativeElement.value = this.inputValue;
        }
    };
    SelectComponent.prototype.keyup = function ($event) {
        this.keyup$.next($event);
        switch ($event.key) {
            case 'Escape':
                this.showOptions = false;
                break;
            default:
                this.inputValue = this.inputRef.nativeElement.value;
                break;
        }
    };
    SelectComponent.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    SelectComponent.prototype.registerOnTouched = function (fn) {
        this.propagateTouched = fn;
    };
    SelectComponent.prototype.select = function (option) {
        this.inputRef.nativeElement.value = '';
        this.inputRef.nativeElement.blur();
        this.inputValue = '';
        this.selection = option;
        this.onChangeByUser.emit(this.selection);
    };
    SelectComponent.prototype.setDisabledState = function (disabled) {
        this.disabled = disabled;
    };
    SelectComponent.prototype.writeValue = function (value) {
        if (value === void 0) { value = ''; }
        this.selection = value;
    };
    return SelectComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], SelectComponent.prototype, "emptyText", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], SelectComponent.prototype, "emptyOptions", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], SelectComponent.prototype, "options", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], SelectComponent.prototype, "change", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], SelectComponent.prototype, "onChangeByUser", void 0);
__decorate([
    core_1.ViewChild('inputRef'),
    __metadata("design:type", core_1.ElementRef)
], SelectComponent.prototype, "inputRef", void 0);
SelectComponent = SelectComponent_1 = __decorate([
    core_1.Component({
        selector: 'ng-select',
        template: '<div class="select-input" [class.active]="isFocused" [attr.disabled]="disabled ? true : null"><div class="select-div" [class.hidden]="isFocused" (click)="focusInput()"><span [class.placeholder]="!selection">{{ selection || emptyText }}</span> <button *ngIf="selection" type="button" (click)="clear($event)">x</button></div><input [class.inactive]="!isFocused" type="text" (keyup)="keyup($event)" (keydown)="keydown($event)" (focusin)="focus($event)" (focusout)="focus($event)" [placeholder]="emptyText" [attr.disabled]="disabled ? true : null" #inputRef></div><options [keyup]="keyup$" [options]="options" [emptyOptions]="emptyOptions" [selections]="[selection]" [showOptions]="showOptions" [inputValue]="inputValue" (onSelect)="select($event)"></options>',
        styles: [':host{display:inline-block;position:relative}.select-input{position:relative}.select-input>div,.select-input>input{width:100%}.select-input>div{position:absolute;top:0;left:0;width:100%}.select-input>input.inactive{display:block;width:0;height:0}.select-input span{display:block;float:left}.select-input button{float:right;margin:0;padding-left:1em;height:1.4em;width:1.4em;border:none;background-color:transparent;line-height:1em;outline:0}'],
        providers: [{
                provide: forms_1.NG_VALUE_ACCESSOR,
                useExisting: core_1.forwardRef(function () { return SelectComponent_1; }),
                multi: true,
            }]
    })
], SelectComponent);
exports.SelectComponent = SelectComponent;
var SelectComponent_1;
//# sourceMappingURL=select.component.js.map