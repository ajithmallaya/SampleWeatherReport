import { ElementRef, EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { Option, Selection } from './interfaces';
export declare class SelectComponent implements ControlValueAccessor {
    emptyText: string;
    emptyOptions: string;
    options: Option[];
    change: EventEmitter<string>;
    onChangeByUser: EventEmitter<string>;
    inputRef: ElementRef;
    _activeOptionIndex: number;
    _selection: Selection;
    _options: Option[];
    disabled: boolean;
    inputValue: string;
    isFocused: boolean;
    keyup$: BehaviorSubject<KeyboardEvent>;
    propagateChange: (_: any) => void;
    propagateTouched: () => void;
    showOptions: boolean;
    selection: Selection;
    clear($event: MouseEvent): void;
    focusInput(): void;
    focus($event: FocusEvent): void;
    keydown($event: KeyboardEvent): void;
    keyup($event: KeyboardEvent): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    select(option: string): void;
    setDisabledState(disabled: boolean): void;
    writeValue(value?: string): void;
}
