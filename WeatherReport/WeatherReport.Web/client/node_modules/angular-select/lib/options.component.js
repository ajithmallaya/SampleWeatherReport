"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var rxjs_1 = require("rxjs");
var OptionsComponent = (function () {
    function OptionsComponent() {
        this.onSelect = new core_1.EventEmitter();
        this.activeOptionIndex = 0;
    }
    OptionsComponent.prototype.select = function (event, option) {
        event.preventDefault();
        this.onSelect.emit(option);
    };
    OptionsComponent.prototype.ngOnChanges = function (changes) {
        if (changes.selections || changes.options || changes.inputValue) {
            this.filteredOptions = this.filterOptions(this.options, this.selections, this.inputValue);
        }
        if (changes.showOptions) {
            this.activeOptionIndex = 0;
        }
    };
    OptionsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.keySubscription = this.keyup.filter(Boolean).subscribe(function ($event) {
            switch ($event.key) {
                case 'Enter':
                    var option = _this.allowNewOptions
                        ? _this.filteredOptions[_this.activeOptionIndex] || _this.inputValue
                        : _this.filteredOptions[_this.activeOptionIndex] || '';
                    _this.onSelect.emit(option);
                    break;
                case 'ArrowDown':
                    _this.activeOptionIndex++;
                    break;
                case 'ArrowUp':
                    _this.activeOptionIndex--;
                    break;
                default:
                    break;
            }
        });
    };
    OptionsComponent.prototype.ngOnDestroy = function () {
        if (this.keySubscription)
            this.keySubscription.unsubscribe();
    };
    OptionsComponent.prototype.filterOptions = function (options, selections, input) {
        if (input === void 0) { input = ''; }
        return (options || []).filter(function (option) {
            return (selections || []).indexOf(option) === -1 && ("" + option).indexOf(input) > -1;
        });
    };
    return OptionsComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], OptionsComponent.prototype, "allowNewOptions", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], OptionsComponent.prototype, "options", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], OptionsComponent.prototype, "selections", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], OptionsComponent.prototype, "showOptions", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], OptionsComponent.prototype, "inputValue", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", rxjs_1.Observable)
], OptionsComponent.prototype, "keyup", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], OptionsComponent.prototype, "emptyOptions", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], OptionsComponent.prototype, "onSelect", void 0);
OptionsComponent = __decorate([
    core_1.Component({
        selector: 'options',
        template: '<ul *ngIf="showOptions && filteredOptions.length > 0"><li *ngFor="let option of filteredOptions; let i = index" [class.active]="activeOptionIndex === i"><button type="button" (mouseover)="activeOptionIndex = i" (mousedown)="select($event, option)">{{ option }}</button></li></ul><ul *ngIf="showOptions && filteredOptions.length === 0 && emptyOptions"><li><div>{{ emptyOptions }}</div></li></ul>',
        styles: ['button,li,ul{width:100%}:host{position:absolute;margin:0;padding:0;width:100%;z-index:100;background-color:#fff;max-height:30rem}ul{margin:0;padding:0;list-style:none;overflow:auto}li.active{background-color:#d3d3d3}button{display:block;border:none;background-color:inherit}']
    })
], OptionsComponent);
exports.OptionsComponent = OptionsComponent;
//# sourceMappingURL=options.component.js.map